{
	"info": {
		"_postman_id": "8e2f9d89-a7d6-4ce5-87f3-48a0b489d70d",
		"name": "Project-Note",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "TestCase1: Step1-Create Note with Title and Schedule",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let timestamp = new Date().toJSON();\r",
							"pm.environment.set('timestamp', timestamp);\r",
							"function genTitle(length) {\r",
							"   var result           = '';\r",
							"   var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 $@$!%*?&';\r",
							"   var charactersLength = characters.length;\r",
							"   for ( var i = 0; i < length; i++ ) {\r",
							"      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
							"   }\r",
							"   return result;\r",
							"}\r",
							"var title = genTitle(Math.floor(Math.random() * 200) + 1 );\r",
							"pm.environment.set('title', title);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Verify Data Type of the Response\", () => {\r",
							"  pm.expect(jsonData).to.be.an(\"object\");\r",
							"  pm.expect(jsonData.title).to.be.a(\"string\");\r",
							"  pm.expect(jsonData.id).to.be.a(\"string\");\r",
							"  pm.expect(jsonData.schedule).to.be.an(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Verify id is not null\", function () {\r",
							"    pm.expect(jsonData.id).to.not.equal(null);\r",
							"});\r",
							"pm.test(\"Verify Title -input & output value matched \", function () {\r",
							"    pm.expect(jsonData.title).to.eql(pm.environment.get(\"title\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Verify Schedule-input and output value matched\", function () {\r",
							"    pm.expect(jsonData.schedule).to.eql(pm.environment.get(\"timestamp\"));\r",
							"});\r",
							"pm.collectionVariables.set(\"id\",jsonData.id);\r",
							"pm.collectionVariables.set(\"title\",jsonData.title);\r",
							"pm.collectionVariables.set(\"schedule\",jsonData.schedule);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"title\": \"{{title}}\",\r\n\"schedule\": \"{{timestamp}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/notes",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "TestCase1:Step2-Sucessfully Retrieve the note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Verify the title value is matched\", function () {\r",
							"    pm.expect(jsonData.title).to.eql(pm.collectionVariables.get(\"title\"));\r",
							"});\r",
							"pm.test(\"Verify Schedule value is matched \", function() {\r",
							"    pm.expect(jsonData.schedule).to.eql(pm.collectionVariables.get(\"schedule\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "",
						"value": "{",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "http://localhost:3000/notes/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"notes",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "TestCase1: Step3-Delete recently created note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Verify delete title value is matched with recently created note\", function () {\r",
							"    pm.expect(jsonData.title).to.eql(pm.collectionVariables.get(\"title\"));\r",
							"});\r",
							"pm.test(\"Verify delete Schedule value is matched with recently created note \", function() {\r",
							"    pm.expect(jsonData.schedule).to.eql(pm.collectionVariables.get(\"schedule\"));\r",
							"});\r",
							"pm.test(\"Verify delete id value is matched with recently created note \", function() {\r",
							"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"id\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/notes/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"notes",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "TestCase1:Step4- Search Deleted Note then recieve the error message",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"pm.test(\"Error is Not Found\", function () {\r",
							"    pm.expect(jsonData.error).to.equal(\"Not Found\");\r",
							"});\r",
							"pm.test(\"Note with this id is not found \", function () {\r",
							"    pm.expect(jsonData.message).to.equal(\"The note with id \\\"\"+pm.collectionVariables.get(\"id\")+\"\\\"\"+\" was not found.\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "",
						"value": "{",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "http://localhost:3000/notes/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"notes",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "TestCase1: Step5- Verify  recieve error message when try to redelete the note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"pm.test(\"Error is Not Found\", function () {\r",
							"    pm.expect(jsonData.error).to.equal(\"Not Found\");\r",
							"});\r",
							"pm.test(\"Note with this id is not found \", function () {\r",
							"    pm.expect(jsonData.message).to.equal(\"The note with id \\\"\"+pm.collectionVariables.get(\"id\")+\"\\\"\"+\" was not found.\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/notes/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"notes",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "TestCase1: Step6-Verify recieve an error message when try to update recently delete note",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let timestamp = new Date().toJSON();\r",
							"pm.environment.set('timestamp', timestamp);\r",
							"function genTitle(length) {\r",
							"   var result           = '';\r",
							"   var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 $@$!%*?&';\r",
							"   var charactersLength = characters.length;\r",
							"   for ( var i = 0; i < length; i++ ) {\r",
							"      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
							"   }\r",
							"   return result;\r",
							"}\r",
							"var title = genTitle(Math.floor(Math.random() * 200) + 1 );\r",
							"pm.environment.set('title', title);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"pm.test(\"Error is Not Found\", function () {\r",
							"    pm.expect(jsonData.error).to.equal(\"Not Found\");\r",
							"});\r",
							"pm.test(\"Note with this id is not found \", function () {\r",
							"    pm.expect(jsonData.message).to.equal(\"The note with id \\\"\"+pm.collectionVariables.get(\"id\")+\"\\\"\"+\" was not found.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{id}}\",\r\n\"title\": \"{{title}}\",\r\n\"schedule\": \"{{timestamp}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/notes/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"notes",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "TestCase2: Step1-Create Note with Title only",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function genTitle(length) {\r",
							"   var result           = '';\r",
							"   var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 $@$!%*?&';\r",
							"   var charactersLength = characters.length;\r",
							"   for ( var i = 0; i < length; i++ ) {\r",
							"      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
							"   }\r",
							"   return result;\r",
							"}\r",
							"var title = genTitle(Math.floor(Math.random() * 200) + 1 );\r",
							"pm.environment.set('title', title);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify Title\", function () {\r",
							"    pm.expect(jsonData.title).to.eql(pm.environment.get(\"title\"));\r",
							"});\r",
							"pm.test(\"Verify Schedule\", function () {\r",
							"    pm.expect(jsonData.schedule).to.equal(undefined);\r",
							"});\r",
							"pm.collectionVariables.set(\"id\",jsonData.id);\r",
							"pm.collectionVariables.set(\"title\",jsonData.title);\r",
							"pm.collectionVariables.set(\"schedule\",jsonData.schedule);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"title\": \"{{title}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/notes",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "TestCase2:Step2-Sucessfully Retrieve the note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Verify the title value is matched\", function () {\r",
							"    pm.expect(jsonData.title).to.eql(pm.collectionVariables.get(\"title\"));\r",
							"});\r",
							"pm.test(\"Verify Schedule value is undefined \", function() {\r",
							"    pm.expect(jsonData.schedule).to.eql(undefined);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "id",
						"value": "{{id}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:3000/notes/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"notes",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "TestCasse3:Create Note- Non-English Title",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Verify id is not null\", function () {\r",
							"    pm.expect(jsonData.id).to.not.equal(null);\r",
							"});\r",
							"pm.test(\"Verify Title -input & output value matched \", function () {\r",
							"    pm.expect(jsonData.title).to.eql(\"今日は世界\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify Schedule-input and output value matched\", function () {\r",
							"    pm.expect(jsonData.schedule).to.eql(\"2022-03-15T07:00:00.000Z\");\r",
							"});\r",
							"pm.collectionVariables.set(\"id\",jsonData.id);\r",
							"pm.collectionVariables.set(\"title\",jsonData.title);\r",
							"pm.collectionVariables.set(\"schedule\",jsonData.schedule);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"title\": \"今日は世界\",\r\n\"schedule\": \"2022-03-15T00:00:00.000-07:00\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/notes",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "TestCase4: Step1-Create Note and have title Min length Validation",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let timestamp = new Date().toJSON();\r",
							"pm.environment.set('timestamp', timestamp);\r",
							"function genTitle(length) {\r",
							"   var result           = '';\r",
							"   var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 $@$!%*?&';\r",
							"   var charactersLength = characters.length;\r",
							"   for ( var i = 0; i < length; i++ ) {\r",
							"      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
							"   }\r",
							"   return result;\r",
							"}\r",
							"var title = genTitle(1);\r",
							"pm.environment.set('title', title);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Verify Data Type of the Response\", () => {\r",
							"  pm.expect(jsonData).to.be.an(\"object\");\r",
							"  pm.expect(jsonData.title).to.be.a(\"string\");\r",
							"  pm.expect(jsonData.id).to.be.a(\"string\");\r",
							"  pm.expect(jsonData.schedule).to.be.an(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify Title\", function () {\r",
							"    pm.expect(jsonData.title).to.eql(pm.environment.get(\"title\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Verify Schedule\", function () {\r",
							"    pm.expect(jsonData.schedule).to.eql(pm.environment.get(\"timestamp\"));\r",
							"});\r",
							"pm.collectionVariables.set(\"id\",jsonData.id);\r",
							"pm.collectionVariables.set(\"title\",jsonData.title);\r",
							"pm.collectionVariables.set(\"schedule\",jsonData.schedule);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"title\": \"{{title}}\",\r\n\"schedule\": \"{{timestamp}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/notes",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "TestCase4:Step2-Sucessfully Retrieve the note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Verify the title value is matched\", function () {\r",
							"    pm.expect(jsonData.title).to.eql(pm.collectionVariables.get(\"title\"));\r",
							"});\r",
							"pm.test(\"Verify Schedule value is matched \", function() {\r",
							"    pm.expect(jsonData.schedule).to.eql(pm.collectionVariables.get(\"schedule\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "",
						"value": "{",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "http://localhost:3000/notes/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"notes",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "TestCase5: Step1-Create Note and title  Max length Validation",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let timestamp = new Date().toJSON();\r",
							"pm.environment.set('timestamp', timestamp);\r",
							"function genTitle(length) {\r",
							"   var result           = '';\r",
							"   var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 $@$!%*?&';\r",
							"   var charactersLength = characters.length;\r",
							"   for ( var i = 0; i < length; i++ ) {\r",
							"      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
							"   }\r",
							"   return result;\r",
							"}\r",
							"var title = genTitle(200);\r",
							"pm.environment.set('title', title);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Verify Data Type of the Response\", () => {\r",
							"  pm.expect(jsonData).to.be.an(\"object\");\r",
							"  pm.expect(jsonData.title).to.be.a(\"string\");\r",
							"  pm.expect(jsonData.id).to.be.a(\"string\");\r",
							"  pm.expect(jsonData.schedule).to.be.an(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify Title\", function () {\r",
							"    pm.expect(jsonData.title).to.eql(pm.environment.get(\"title\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Verify Schedule\", function () {\r",
							"    pm.expect(jsonData.schedule).to.eql(pm.environment.get(\"timestamp\"));\r",
							"});\r",
							"pm.collectionVariables.set(\"id\",jsonData.id);\r",
							"pm.collectionVariables.set(\"title\",jsonData.title);\r",
							"pm.collectionVariables.set(\"schedule\",jsonData.schedule);\r",
							"pm.collectionVariables.set(\"querytitle\",(jsonData.title).substring(0,10));\r",
							"console.log(pm.collectionVariables.get(\"querytitle\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"title\": \"{{title}}\",\r\n\"schedule\": \"{{timestamp}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/notes",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "TestCase5:Step2-Sucessfully Retrieve the note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Verify the title value is matched\", function () {\r",
							"    pm.expect(jsonData.title).to.eql(pm.collectionVariables.get(\"title\"));\r",
							"});\r",
							"pm.test(\"Verify Schedule value is matched \", function() {\r",
							"    pm.expect(jsonData.schedule).to.eql(pm.collectionVariables.get(\"schedule\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "",
						"value": "{",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "http://localhost:3000/notes/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"notes",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "TestCase5:Step3-Sucessfully Retrieve with filter query",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const jsonData = pm.response.json();\r",
							"var length = Object.keys(jsonData).length;\r",
							"for ( var i = 0; i < length; i++ ) {\r",
							"pm.test(\"Verify the title value is matched\", function () {\r",
							"    pm.expect(jsonData[i].title).to.eql(pm.collectionVariables.get(\"title\"));\r",
							"});\r",
							"pm.test(\"Verify Schedule value is matched \", function() {\r",
							"    pm.expect(jsonData[i].schedule).to.eql(pm.collectionVariables.get(\"schedule\"));\r",
							"});\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "",
						"value": "{",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "http://localhost:3000/notes?query={{querytitle}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"notes"
					],
					"query": [
						{
							"key": "query",
							"value": "{{querytitle}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "TestCase6: Step1-Create Note with 201 Chars length title - Negative",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let timestamp = new Date().toJSON();\r",
							"pm.environment.set('timestamp', timestamp);\r",
							"function genTitle(length) {\r",
							"   var result           = '';\r",
							"   var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 $@$!%*?&';\r",
							"   var charactersLength = characters.length;\r",
							"   for ( var i = 0; i < length; i++ ) {\r",
							"      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
							"   }\r",
							"   return result;\r",
							"}\r",
							"var title = genTitle(201);\r",
							"pm.environment.set('title', title);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Error is Bad Request\", function () {\r",
							"    pm.expect(jsonData.error).to.equal(\"Bad Request\");\r",
							"});\r",
							"pm.test(\"Message is Invalid request payload input\", function () {\r",
							"    pm.expect(jsonData.message).to.equal(\"Invalid request payload input\");\r",
							"});\r",
							"pm.test(\"Verify Title is undefined\", function () {\r",
							"    pm.expect(jsonData.title).to.eql(undefined);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify Schedule is undefined\", function () {\r",
							"    pm.expect(jsonData.schedule).to.eql(undefined);\r",
							"});\r",
							"pm.test(\"Verify id is undefined\", function () {\r",
							"    pm.expect(jsonData.id).to.eql(undefined);\r",
							"});\r",
							"pm.collectionVariables.set(\"title\",pm.environment.get('title'));\r",
							"var maxTitle = pm.environment.get('title').slice(0, -1);\r",
							"pm.collectionVariables.set(\"maxTitle\",maxTitle);\r",
							"pm.collectionVariables.set(\"querytitle\",(maxTitle).substring(0,10));\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"title\": \"{{title}}\",\r\n\"schedule\": \"{{timestamp}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/notes",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "TestCase6:Step2-Verify that no note is created",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Error is Bad Request\", function () {\r",
							"    pm.expect(jsonData.error).to.equal(\"Bad Request\");\r",
							"});\r",
							"pm.test(\"Message is Invalid request query input\", function () {\r",
							"    pm.expect(jsonData.message).to.equal(\"Invalid request query input\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "",
						"value": "{",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "http://localhost:3000/notes?query={{title}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"notes"
					],
					"query": [
						{
							"key": "query",
							"value": "{{title}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "TestCase6:Step2-filter query with 200 chars title- no results",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Error is Bad Request\", function () {\r",
							"    pm.expect(jsonData.error).to.equal(\"Bad Request\");\r",
							"});\r",
							"pm.test(\"Message is Invalid request query input\", function () {\r",
							"    pm.expect(jsonData.message).to.equal(\"Invalid request query input\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "",
						"value": "{",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "http://localhost:3000/notes?query={{maxTitle}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"notes"
					],
					"query": [
						{
							"key": "query",
							"value": "{{maxTitle}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "TestCase6:Step3-Filter query with 10 chars title(allow limit)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify that  Response Body is empty\", function() {\r",
							"var jsonData = JSON.parse(responseBody)\r",
							"pm.expect(jsonData.lenght).to.eql(undefined)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "",
						"value": "{",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "http://localhost:3000/notes?query={{querytitle}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"notes"
					],
					"query": [
						{
							"key": "query",
							"value": "{{querytitle}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "TestCase7: Verify not able to create note with schedule only",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let timestamp = new Date().toJSON();\r",
							"pm.environment.set('timestamp', timestamp);\r",
							"function genTitle(length) {\r",
							"   var result           = '';\r",
							"   var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 $@$!%*?&';\r",
							"   var charactersLength = characters.length;\r",
							"   for ( var i = 0; i < length; i++ ) {\r",
							"      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
							"   }\r",
							"   return result;\r",
							"}\r",
							"var title = genTitle(Math.floor(Math.random() * 200) + 1 );\r",
							"pm.environment.set('title', title);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Error is Bad Request\", function () {\r",
							"    pm.expect(jsonData.error).to.equal(\"Bad Request\");\r",
							"});\r",
							"pm.test(\"Message is Invalid request payload input\", function () {\r",
							"    pm.expect(jsonData.message).to.equal(\"Invalid request payload input\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"schedule\": \"{{timestamp}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/notes",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "TestCase8: Step1- Create 1st note with title and schedule",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify Title\", function () {\r",
							"    pm.expect(jsonData.title).to.eql(\"Test1\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify Schedule\", function () {\r",
							"    pm.expect(jsonData.schedule).to.eql(\"2021-03-15T04:11:34.505Z\");\r",
							"});\r",
							"pm.collectionVariables.set(\"id\",jsonData.id);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"title\": \"Test1\",\r\n\"schedule\": \"2021-03-15T04:11:34.505Z\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/notes",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "TestCase8: Step2- Create 2nd  note with same title and schedule",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify Title\", function () {\r",
							"    pm.expect(jsonData.title).to.eql(\"Test1\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify Schedule\", function () {\r",
							"    pm.expect(jsonData.schedule).to.eql(\"2021-03-15T04:11:34.505Z\");\r",
							"});\r",
							"pm.test(\"Verify 2nd note Id is different from 1st note\", function () {\r",
							"    pm.expect(jsonData.id).not.equal(pm.collectionVariables.get(\"id\"));\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"title\": \"Test1\",\r\n\"schedule\": \"2021-03-15T04:11:34.505Z\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/notes",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "TestCase9: Step1-Create Note with Title and Schedule",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let timestamp = new Date().toJSON();\r",
							"pm.environment.set('timestamp', timestamp);\r",
							"function genTitle(length) {\r",
							"   var result           = '';\r",
							"   var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 $@$!%*?&';\r",
							"   var charactersLength = characters.length;\r",
							"   for ( var i = 0; i < length; i++ ) {\r",
							"      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
							"   }\r",
							"   return result;\r",
							"}\r",
							"var title = genTitle(Math.floor(Math.random() * 200) + 1 );\r",
							"pm.environment.set('title', title);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Verify Data Type of the Response\", () => {\r",
							"  pm.expect(jsonData).to.be.an(\"object\");\r",
							"  pm.expect(jsonData.title).to.be.a(\"string\");\r",
							"  pm.expect(jsonData.id).to.be.a(\"string\");\r",
							"  pm.expect(jsonData.schedule).to.be.an(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify Title\", function () {\r",
							"    pm.expect(jsonData.title).to.eql(pm.environment.get(\"title\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Verify Schedule\", function () {\r",
							"    pm.expect(jsonData.schedule).to.eql(pm.environment.get(\"timestamp\"));\r",
							"});\r",
							"pm.collectionVariables.set(\"id\",jsonData.id);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"title\": \"{{title}}\",\r\n\"schedule\": \"{{timestamp}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/notes",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "TestCase9: Step2- Update Title and Schedule for recently created note",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let timestamp = new Date().toJSON();\r",
							"pm.environment.set('timestamp', timestamp);\r",
							"function genTitle(length) {\r",
							"   var result           = '';\r",
							"   var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 $@$!%*?&';\r",
							"   var charactersLength = characters.length;\r",
							"   for ( var i = 0; i < length; i++ ) {\r",
							"      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
							"   }\r",
							"   return result;\r",
							"}\r",
							"var title = genTitle(Math.floor(Math.random() * 200) + 1 );\r",
							"pm.environment.set('title', title);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Verify Data Type of the Response\", () => {\r",
							"  pm.expect(jsonData).to.be.an(\"object\");\r",
							"  pm.expect(jsonData.title).to.be.a(\"string\");\r",
							"  pm.expect(jsonData.id).to.be.a(\"string\");\r",
							"  pm.expect(jsonData.schedule).to.be.an(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify Title is updated\", function () {\r",
							"    pm.expect(jsonData.title).to.eql(pm.environment.get(\"title\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Verify Schedule is updated\", function () {\r",
							"    pm.expect(jsonData.schedule).to.eql(pm.environment.get(\"timestamp\"));\r",
							"});\r",
							"pm.collectionVariables.set(\"title\",jsonData.title);\r",
							"pm.collectionVariables.set(\"schedule\",jsonData.schedule);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"id\": \"{{id}}\",\r\n\"title\": \"{{title}}\",\r\n\"schedule\": \"{{timestamp}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/notes/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"notes",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "TestCase9:Step3-Sucessfully Retrieve updated note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Verify the title value is matched\", function () {\r",
							"    pm.expect(jsonData.title).to.eql(pm.collectionVariables.get(\"title\"));\r",
							"});\r",
							"pm.test(\"Verify Schedule value is matched \", function() {\r",
							"    pm.expect(jsonData.schedule).to.eql(pm.collectionVariables.get(\"schedule\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "",
						"value": "{",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "http://localhost:3000/notes/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"notes",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "TestCase10: Verify Error mesasge for wrong date format for Schedule field",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Error is Bad Request\", function () {\r",
							"    pm.expect(jsonData.error).to.equal(\"Bad Request\");\r",
							"});\r",
							"pm.test(\"Message is Invalid request payload input\", function () {\r",
							"    pm.expect(jsonData.message).to.equal(\"Invalid request payload input\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"title\": \"testcase9\",\r\n\"schedule\": \"*\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/notes",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "TestCase10: Verify Error mesasge for wrong date format for Schedule field Copy",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Error is Bad Request\", function () {\r",
							"    pm.expect(jsonData.error).to.equal(\"Bad Request\");\r",
							"});\r",
							"pm.test(\"Message is Invalid request payload input\", function () {\r",
							"    pm.expect(jsonData.message).to.equal(\"Invalid request payload input\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"title\": \"testcase9\",\r\n\"schedule\": \"03-15-2021\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/notes",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "TestCase11:  Verify Allow to create note with schedule with yyyy-mm-dd",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify Title is testcase11\", function () {\r",
							"    pm.expect(jsonData.title).to.eql(\"testcase11\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify Schedule is 2021-03-15T00:00:00.000Z\", function () {\r",
							"    pm.expect(jsonData.schedule).to.eql(\"2021-03-15T00:00:00.000Z\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"title\": \"testcase11\",\r\n\"schedule\": \"2021-03-15\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/notes",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "TestCase12: Step1-Create Note with Title and Schedule",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let timestamp = new Date().toJSON();\r",
							"pm.environment.set('timestamp', timestamp);\r",
							"function genTitle(length) {\r",
							"   var result           = '';\r",
							"   var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 $@$!%*?&';\r",
							"   var charactersLength = characters.length;\r",
							"   for ( var i = 0; i < length; i++ ) {\r",
							"      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
							"   }\r",
							"   return result;\r",
							"}\r",
							"var title = genTitle(Math.floor(Math.random() * 200) + 1 );\r",
							"pm.environment.set('title', title);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Verify Data Type of the Response\", () => {\r",
							"  pm.expect(jsonData).to.be.an(\"object\");\r",
							"  pm.expect(jsonData.title).to.be.a(\"string\");\r",
							"  pm.expect(jsonData.id).to.be.a(\"string\");\r",
							"  pm.expect(jsonData.schedule).to.be.an(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify Title\", function () {\r",
							"    pm.expect(jsonData.title).to.eql(pm.environment.get(\"title\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Verify Schedule\", function () {\r",
							"    pm.expect(jsonData.schedule).to.eql(pm.environment.get(\"timestamp\"));\r",
							"});\r",
							"pm.collectionVariables.set(\"id\",jsonData.id);\r",
							"pm.collectionVariables.set(\"schedule\",jsonData.schedule);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"title\": \"{{title}}\",\r\n\"schedule\": \"{{timestamp}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/notes",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "TestCase12: Step2- Update Title only  for recently created note",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function genTitle(length) {\r",
							"   var result           = '';\r",
							"   var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 $@$!%*?&';\r",
							"   var charactersLength = characters.length;\r",
							"   for ( var i = 0; i < length; i++ ) {\r",
							"      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
							"   }\r",
							"   return result;\r",
							"}\r",
							"var title = genTitle(Math.floor(Math.random() * 200) + 1 );\r",
							"pm.environment.set('title', title);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify Title is updated\", function () {\r",
							"    pm.expect(jsonData.title).to.eql(pm.environment.get(\"title\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Verify Schedule is not updated as expected\", function () {\r",
							"    pm.expect(jsonData.schedule).to.eql(pm.collectionVariables.get(\"schedule\"));\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"id\": \"{{id}}\",\r\n\"title\": \"{{title}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/notes/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"notes",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "TestCase13: Step1-Create Note with Title and Schedule",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let timestamp = new Date().toJSON();\r",
							"pm.environment.set('timestamp', timestamp);\r",
							"function genTitle(length) {\r",
							"   var result           = '';\r",
							"   var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 $@$!%*?&';\r",
							"   var charactersLength = characters.length;\r",
							"   for ( var i = 0; i < length; i++ ) {\r",
							"      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
							"   }\r",
							"   return result;\r",
							"}\r",
							"var title = genTitle(Math.floor(Math.random() * 200) + 1 );\r",
							"pm.environment.set('title', title);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Verify Data Type of the Response\", () => {\r",
							"  pm.expect(jsonData).to.be.an(\"object\");\r",
							"  pm.expect(jsonData.title).to.be.a(\"string\");\r",
							"  pm.expect(jsonData.id).to.be.a(\"string\");\r",
							"  pm.expect(jsonData.schedule).to.be.an(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify Title\", function () {\r",
							"    pm.expect(jsonData.title).to.eql(pm.environment.get(\"title\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Verify Schedule\", function () {\r",
							"    pm.expect(jsonData.schedule).to.eql(pm.environment.get(\"timestamp\"));\r",
							"});\r",
							"pm.collectionVariables.set(\"id\",jsonData.id);\r",
							"pm.collectionVariables.set(\"title\",jsonData.title);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"title\": \"{{title}}\",\r\n\"schedule\": \"{{timestamp}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/notes",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "TestCase12: Step2- Update schedule only  for recently created note",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify Title is not  updated as expected\", function () {\r",
							"    pm.expect(jsonData.title).to.eql(pm.collectionVariables.get(\"title\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Verify Schedule is  updated as expected\", function () {\r",
							"    pm.expect(jsonData.schedule).to.eql(\"2021-12-24T00:00:00.000Z\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"id\": \"{{id}}\",\r\n\"schedule\": \"2021-12-24\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/notes/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"notes",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "TestCase13: Verify receive an Error Message when try to update with no value",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Error is Bad Request\", function () {\r",
							"    pm.expect(jsonData.error).to.equal(\"Bad Request\");\r",
							"});\r",
							"pm.test(\"Message is Invalid request payload input\", function () {\r",
							"    pm.expect(jsonData.message).to.equal(\"Invalid request payload input\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"id\": \"{{id}}\",\r\n\"title\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/notes/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"notes",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "2d923dc9-c777-4338-b551-e28871a38706"
		},
		{
			"key": "title",
			"value": "今日は世界"
		},
		{
			"key": "schedule",
			"value": "2022-03-15T07:00:00.000Z"
		},
		{
			"key": "maxTitle",
			"value": "kMKb5v3RnmcYNOE5U8xSGfX0ppsq7fR%pTxMaG$CbD$BKKCyjR9ez7piDrdX1AoFeO8BRLh9ip8*3Jx5OdwMcY@1aJHVo HMfa% LoR9Xj$dJnxm03k!wo6H7I6Yg6k*Q8 *!zPWi*eWPhuALNmzAgUIqDJju@a@4uSyVvOoYZZ5oWdU$$@7VG*%dA6L9qHo npx53IE"
		},
		{
			"key": "querytitle",
			"value": "kMKb5v3Rnm"
		},
		{
			"key": "UpdatedID",
			"value": null
		}
	]
}